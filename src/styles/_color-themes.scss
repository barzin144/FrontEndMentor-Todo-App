$themes: (
	light:(
			backgroundColor: $Very_Light_Gray,
			todoItemBorderColor: $Light_Gray_Color,
			boxShadowColor: $Light_Grayish_Blue,
			inputBackground:White,
			inputTextColor: $Very_Dark_Desaturated_Blue,
			clearColorHover: $Very_Dark_Grayish_Blue,
			heroImage: url('../images/bg-desktop-light.jpg'),
			heroMobileImage: url('../images/bg-mobile-light.jpg'),
			themeSwicherIcon: url('../images/icon-moon.svg')
		),
	dark:(
			backgroundColor: $Very_Dark_Blue,
			todoItemBorderColor: $Dark_Gray_Color,
			boxShadowColor: $Very_Very_Dark_Blue,
			inputBackground: $Very_Dark_Desaturated_Blue,
			inputTextColor: $Very_Light_Gray,
			clearColorHover: $Light_Grayish_Blue_Hover,
			heroImage: url('../images/bg-desktop-dark.jpg'),
			heroMobileImage: url('../images/bg-mobile-dark.jpg'),
			themeSwicherIcon: url('../images/icon-sun.svg')
		)
);

@mixin themed() {
	@each $theme, $map in $themes {
		.theme--#{$theme} & {
			$theme-map: () !global;
			@each $key, $submap in $map {
				$value: map-get(map-get($themes, $theme), '#{$key}');
				$theme-map: map-merge($theme-map,  ($key: $value)) !global;
			}
			@content;
			$theme-map: null !global;
		}
	}
}

@function t($key) {
	@return map-get($theme-map, $key);
}
